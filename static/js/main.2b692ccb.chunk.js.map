{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/FeedbackOptions/FeedbackOptions.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onFeedback","map","option","type","data-action","onClick","className","s","button","NotificationMessage","message","Section","title","children","Statistics","good","neutral","bad","total","percentageOfGoodFeedbacks","paragraph","App","useState","setGood","setNeutral","setBad","totalQuantityOfFeedbacks","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,UAAY,gC,mBCA9BD,EAAOC,QAAU,CAAC,OAAS,kC,uJCsBZC,MAlBf,YAAmD,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAChC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACIC,KAAK,SACLC,cAAaL,EACbM,QAAS,kBAAKL,EAAWE,IACzBI,UAAWC,IAAEC,OAJjB,SAMKN,GADIA,OCFNO,MARf,YAA2C,IAAZC,EAAW,EAAXA,QAC3B,OAAO,4BAAIA,KCWAC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,gCACI,6BAAKD,IACJC,M,gBCoBMC,MAtBf,YAA+E,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,0BAC7C,OACA,gCACI,oBAAGb,UAAWC,IAAEa,UAAhB,oBAAmCL,KACnC,oBAAGT,UAAWC,IAAEa,UAAhB,uBAAsCJ,KACtC,oBAAGV,UAAWC,IAAEa,UAAhB,mBAAkCH,KAClC,oBAAGX,UAAWC,IAAEa,UAAhB,sBAAqCF,KACrC,oBAAGZ,UAAWC,IAAEa,UAAhB,iCAAgDD,EAAhD,W,MCAO,SAASE,IAAO,IAAD,EACNC,mBAAS,GADH,mBACrBP,EADqB,KACfQ,EADe,OAEAD,mBAAS,GAFT,mBAErBN,EAFqB,KAEZQ,EAFY,OAGNF,mBAAS,GAHH,mBAGrBL,EAHqB,KAGhBQ,EAHgB,KAyBtBC,EAA2B,kBAAMX,EAAOC,EAAUC,GAIxD,OACG,qCACE,cAAC,EAAD,CAASL,MAAO,wBAAhB,SACC,cAAC,EAAD,CACEZ,WA1BkB,SAAAE,GACxB,OAAQA,GACN,IAAK,OACHqB,EAAQR,EAAO,GACf,MAEF,IAAK,UACHS,EAAWR,EAAU,GACrB,MAEF,IAAK,MACHS,EAAOR,EAAM,GACb,MAEF,QAAS,SAaLlB,QA7BS,CAAC,OAAQ,UAAW,WAiChC,cAAC,EAAD,CAASa,MAAO,aAAhB,SACGc,IACA,cAAC,EAAD,CACEX,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOQ,IACPP,0BAlB8BQ,KAAKC,MAAOb,EAAOW,IAA8B,MAAM,IAqBrF,cAAC,EAAD,CAAqBhB,QAAQ,sCC1DzC,IAYemB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2b692ccb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paragraph\":\"Statistics_paragraph__CK9MH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3HRM_\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\n\r\nfunction FeedbackOptions({ options, onFeedback }) {\r\n    return options.map(option => (\r\n            <button\r\n                type=\"button\"\r\n                data-action={options}\r\n                onClick={()=> onFeedback(option)}\r\n                className={s.button}\r\n                key={option}>\r\n                {option}\r\n            </button>\r\n        ))\r\n    };\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n    onFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\nfunction NotificationMessage({ message }) {\r\n    return <p>{message}</p>;\r\n};\r\n\r\nNotificationMessage.propTypes={\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default NotificationMessage;","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </div>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.element\r\n};\r\n\r\nexport default Section;","import PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css'\r\n\r\nfunction Statistics({ good, neutral, bad, total, percentageOfGoodFeedbacks }) {\r\n    return (\r\n    <div>\r\n        <p className={s.paragraph}>Good : {good}</p>\r\n        <p className={s.paragraph}>Neutral : {neutral}</p>\r\n        <p className={s.paragraph}>Bad : {bad}</p>\r\n        <p className={s.paragraph}>Total  : {total}</p>\r\n        <p className={s.paragraph}>Positive feedback : {percentageOfGoodFeedbacks}%</p>\r\n    </div>\r\n)\r\n    \r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    percentageOfGoodFeedbacks: PropTypes.number.isRequired,\r\n\r\n};\r\n\r\nexport default Statistics;","// import React, { Component } from 'react';\nimport { useState} from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport NotificationMessage from './components/NotificationMessage/NotificationMessage';\nimport Section from './components/Section/Section';\nimport Statistics from './components/Statistics/Statistics';\n\nimport './App.css';\n\n\nexport default function App() {\n  const [good, setGood]=useState(0);\n  const [neutral, setNeutral]=useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options =  ['good', 'neutral', 'bad'] ;\n\n  const feedbackIncrement = option => {\n    switch (option) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      \n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      \n      case 'bad':\n        setBad(bad + 1);\n        break;\n      \n      default: return;\n      }\n  }\n\n  const totalQuantityOfFeedbacks = () => good + neutral + bad;\n  \n  const percentageOfGoodFeedbacks = () => Math.round((good / totalQuantityOfFeedbacks()) * 100)||0;\n\n  return (\n     <>\n       <Section title={'Please leave feedback'}>\n        <FeedbackOptions\n          onFeedback={feedbackIncrement}\n          options={options}>\n         </FeedbackOptions>\n      </Section>\n      \n       <Section title={'Statistics'}>\n         {totalQuantityOfFeedbacks() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalQuantityOfFeedbacks()}\n            percentageOfGoodFeedbacks={percentageOfGoodFeedbacks()}>\n          </Statistics>\n        ) : (\n            <NotificationMessage message='There is no one feedback yet' />\n          )}\n      </Section>\n    </>)\n}\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0\n//   }\n\n  // totalQuantityOfFeedbacks = () => {\n  //   const { good, neutral, bad } = this.state;\n\n  //   const total = good + neutral + bad;\n  //   return total;\n  // };\n\n  // percentageOfGoodFeedbacks = () => {\n  //   const total = this.totalQuantityOfFeedbacks();\n  //   const { good } = this.state;\n  //   const percentageOfGood = total ? Math.round((good / total) * 100) : 0;\n  //   return percentageOfGood;\n  // };\n\n//   onFeedbackIncrease = ({ target }) => {\n//     const type = target.dataset.action;\n//     this.setState(prevState => {\n//       return { [type]: prevState[type] + 1 };\n//     });\n//   };\n   \n//   render() {\n\n//     const { good, neutral, bad } = this.state;\n//     const options = ['good', 'neutral','bad'];\n//     const totalFedbacks = this.totalQuantityOfFeedbacks();\n//     const goodFeedbacks = this.percentageOfGoodFeedbacks();\n\n\n//     return (\n//       <>\n//         <Section title={'Please leave feedback'}>\n//           <FeedbackOptions options={options} onFeedback={this.onFeedbackIncrease}>\n//           </FeedbackOptions>\n//         </Section>\n\n//         <Section title={'Statistics'}>\n//           {good || neutral || bad ? (\n//             <Statistics good={good} neutral={neutral} bad={bad} total={totalFedbacks} percentageOfGoodFeedbacks={goodFeedbacks}/>): (<NotificationMessage message='There is no one feedback yet'/>)\n//           }\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}